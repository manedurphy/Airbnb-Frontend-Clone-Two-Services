apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: static-deploy
  name: static-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: static-deploy
  template:
    metadata:
      labels:
        app: static-deploy
    spec:
      containers:
      - image: manedurphy/static-files:1.0.0
        name: static-files
        env:
        - name: HOSTS_API
          value: http://hosts-api-service:8080
        - name: PROPERTIES_API
          value: http://properties-api-service:8081
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /healthz
            port: 5000
          failureThreshold: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis-read-deploy
  name: redis-read-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-read-deploy
  template:
    metadata:
      labels:
        app: redis-read-deploy
    spec:
      containers:
      - image: redis:6.2.3-alpine
        name: redis
        command:
          - "redis-server"
        args:
          - "--replicaof"
          - "redis-write-service.default.svc.cluster.local"
          - "6379"
          - "--protected-mode"
          - "no"
        resources:
          requests:
            memory: "50Mi"
            cpu: "25m"
          limits:
            memory: "75Mi"
            cpu: "50m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis-write-deploy
  name: redis-write-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-write-deploy
  template:
    metadata:
      labels:
        app: redis-write-deploy
    spec:
      containers:
      - image: redis:6.2.3-alpine
        name: redis
        command:
          - "redis-server"
        args:
          - "--protected-mode"
          - "no"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: properties-api-deploy
  name: properties-api-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: properties-api-deploy
  template:
    metadata:
      labels:
        app: properties-api-deploy
    spec:
      containers:
      - image: manedurphy/properties-api:1.0.0
        name: properties-api
        env:
        - name: HOST
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: HOST
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_PASSWORD
        - name: MYSQL_DB
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_PROPERTIES_DB
        - name: HOSTS_API
          value: http://hosts-api-service:8080
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /properties/healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /properties/healthz
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hosts-api-deploy
  name: hosts-api-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hosts-api-deploy
  template:
    metadata:
      labels:
        app: hosts-api-deploy
    spec:
      containers:
      - image: manedurphy/hosts-api:1.0.0
        name: hosts-api
        env:
        - name: HOST
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: HOST
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_PASSWORD
        - name: MYSQL_DB
          valueFrom:
            secretKeyRef:
              name: db-creds
              key: MYSQL_HOSTS_DB
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /hosts/healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /hosts/healthz
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: get-data-api-deploy
  name: get-data-api-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: get-data-api-deploy
  template:
    metadata:
      labels:
        app: get-data-api-deploy
    spec:
      containers:
      - image: manedurphy/get-data-api:1.0.0
        name: get-data-api
        env:
        - name: REDIS_READ_URL
          value: redis-read-service:6379
        - name: REDIS_WRITE_URL
          value: redis-write-service:6379
        - name: HOSTS_API
          value: http://hosts-api-service:8080
        - name: PROPERTIES_API
          value: http://properties-api-service:8081
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/healthz
            port: 8000
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /api/healthz
            port: 8000
          failureThreshold: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-autoscaler
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: k8s-autoscale
  template:
    metadata:
      labels:
        app: k8s-autoscale
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: k8s-autoscale
        image: manedurphy/linode-autoscaler
        env:
        - name: LINODE_PERSONAL_ACCCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: linode-personal-access-token-k8s-autoscaler
              key: token
        - name:  LINODE_LKE_CLUSTER_ID
          value: "28752"
        - name:  LINODE_LKE_CLUSTER_POOL_MINIMUM_NODES
          value: "3"
        - name:  LINODE_LKE_CLUSTER_POOL_ID
          value: "43150"
        - name:  AUTOSCALE_TRIGGER
          value: "cpu"
        - name:  AUTOSCALE_UP_PERCENTAGE
          value: "60"
        - name:  AUTOSCALE_DOWN_PERCENTAGE
          value: "30"
        - name:  AUTOSCALE_QUERY_INTERVAL
          value: "10"
        - name:  AUTOSCALE_THRESHOLD_COUNT
          value: "3"
        - name:  AUTOSCALE_NUMBER_OF_NODES
          value: "1"
        - name:  AUTOSCALE_WAIT_TIME_AFTER_SCALING
          value: "150"
        resources:
          requests:
            memory: 32Mi
          limits:
            memory: 32Mi